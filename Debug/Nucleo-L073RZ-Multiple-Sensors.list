
Nucleo-L073RZ-Multiple-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000417c  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000034  08007bcc  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007bcc  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce1c  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca6  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141a9  00000000  00000000  0002ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de5b  00000000  00000000  00044149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e3a2  00000000  00000000  00051fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000d0398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039f4 	.word	0x080039f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080039f4 	.word	0x080039f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b0c2      	sub	sp, #264	; 0x108
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char currentString[256] = "Hello World!";
 80004ae:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <main+0x140>)
 80004b0:	2284      	movs	r2, #132	; 0x84
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	189b      	adds	r3, r3, r2
 80004b6:	19d9      	adds	r1, r3, r7
 80004b8:	4a4c      	ldr	r2, [pc, #304]	; (80005ec <main+0x144>)
 80004ba:	000b      	movs	r3, r1
 80004bc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004be:	c331      	stmia	r3!, {r0, r4, r5}
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	230d      	movs	r3, #13
 80004c6:	18cb      	adds	r3, r1, r3
 80004c8:	22f3      	movs	r2, #243	; 0xf3
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f003 fa89 	bl	80039e4 <memset>
	char retChar=0;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	33ff      	adds	r3, #255	; 0xff
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fd75 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f899 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f97b 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f949 	bl	800077c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_I2C1_Init>
  /*Push button*/



  /*OLED*/
  ssd1306_Init();
 80004ee:	f000 fb2f 	bl	8000b50 <ssd1306_Init>
//  ssd1306_Fill(White);
//  ssd1306_UpdateScreen();
  ssd1306_SetCursor(0, 0);
 80004f2:	2100      	movs	r1, #0
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 fd0f 	bl	8000f18 <ssd1306_SetCursor>
  retChar = ssd1306_WriteString("Please press the blue button!", Font_6x8, White);
 80004fa:	1dfc      	adds	r4, r7, #7
 80004fc:	34ff      	adds	r4, #255	; 0xff
 80004fe:	4a3c      	ldr	r2, [pc, #240]	; (80005f0 <main+0x148>)
 8000500:	483c      	ldr	r0, [pc, #240]	; (80005f4 <main+0x14c>)
 8000502:	2301      	movs	r3, #1
 8000504:	6811      	ldr	r1, [r2, #0]
 8000506:	6852      	ldr	r2, [r2, #4]
 8000508:	f000 fcdc 	bl	8000ec4 <ssd1306_WriteString>
 800050c:	0003      	movs	r3, r0
 800050e:	7023      	strb	r3, [r4, #0]
  ssd1306_SetCursor(0, 8);
 8000510:	2108      	movs	r1, #8
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fd00 	bl	8000f18 <ssd1306_SetCursor>
  retChar = ssd1306_WriteString("button!", Font_6x8, White);
 8000518:	1dfc      	adds	r4, r7, #7
 800051a:	34ff      	adds	r4, #255	; 0xff
 800051c:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <main+0x148>)
 800051e:	4836      	ldr	r0, [pc, #216]	; (80005f8 <main+0x150>)
 8000520:	2301      	movs	r3, #1
 8000522:	6811      	ldr	r1, [r2, #0]
 8000524:	6852      	ldr	r2, [r2, #4]
 8000526:	f000 fccd 	bl	8000ec4 <ssd1306_WriteString>
 800052a:	0003      	movs	r3, r0
 800052c:	7023      	strb	r3, [r4, #0]
  ssd1306_UpdateScreen();
 800052e:	f000 fb9f 	bl	8000c70 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t a = 0;
 8000532:	2308      	movs	r3, #8
 8000534:	33ff      	adds	r3, #255	; 0xff
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  HAL_GPIO_TogglePin(USER_LED_GREEN_GPIO_Port , USER_LED_GREEN_Pin);
 800053c:	23a0      	movs	r3, #160	; 0xa0
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f001 f84d 	bl	80015e2 <HAL_GPIO_TogglePin>

	  if(changeFont){
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <main+0x154>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f5      	beq.n	800053c <main+0x94>
		  changeFont = false;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <main+0x154>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]

		  ssd1306_SetCursor(0, 0);
 8000556:	2100      	movs	r1, #0
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fcdd 	bl	8000f18 <ssd1306_SetCursor>
		  ssd1306_Fill(Black);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fb62 	bl	8000c28 <ssd1306_Fill>
		  switch (a++) {
 8000564:	2208      	movs	r2, #8
 8000566:	32ff      	adds	r2, #255	; 0xff
 8000568:	18bb      	adds	r3, r7, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	18ba      	adds	r2, r7, r2
 800056e:	1c59      	adds	r1, r3, #1
 8000570:	7011      	strb	r1, [r2, #0]
 8000572:	2b04      	cmp	r3, #4
 8000574:	d82c      	bhi.n	80005d0 <main+0x128>
 8000576:	009a      	lsls	r2, r3, #2
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <main+0x158>)
 800057a:	18d3      	adds	r3, r2, r3
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	469f      	mov	pc, r3
				case 0:
					ssd1306_WriteString(currentString, Font_6x8, White);
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <main+0x148>)
 8000582:	1d38      	adds	r0, r7, #4
 8000584:	2301      	movs	r3, #1
 8000586:	6811      	ldr	r1, [r2, #0]
 8000588:	6852      	ldr	r2, [r2, #4]
 800058a:	f000 fc9b 	bl	8000ec4 <ssd1306_WriteString>
					break;
 800058e:	e028      	b.n	80005e2 <main+0x13a>
				case 1:
					ssd1306_WriteString(currentString, Font_7x10, White);
 8000590:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <main+0x15c>)
 8000592:	1d38      	adds	r0, r7, #4
 8000594:	2301      	movs	r3, #1
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	6852      	ldr	r2, [r2, #4]
 800059a:	f000 fc93 	bl	8000ec4 <ssd1306_WriteString>
					break;
 800059e:	e020      	b.n	80005e2 <main+0x13a>
				case 2:
					ssd1306_WriteString(currentString, Font_11x18, White);
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <main+0x160>)
 80005a2:	1d38      	adds	r0, r7, #4
 80005a4:	2301      	movs	r3, #1
 80005a6:	6811      	ldr	r1, [r2, #0]
 80005a8:	6852      	ldr	r2, [r2, #4]
 80005aa:	f000 fc8b 	bl	8000ec4 <ssd1306_WriteString>
					break;
 80005ae:	e018      	b.n	80005e2 <main+0x13a>
				case 3:
					ssd1306_WriteString(currentString, Font_16x24, White);
 80005b0:	4a16      	ldr	r2, [pc, #88]	; (800060c <main+0x164>)
 80005b2:	1d38      	adds	r0, r7, #4
 80005b4:	2301      	movs	r3, #1
 80005b6:	6811      	ldr	r1, [r2, #0]
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	f000 fc83 	bl	8000ec4 <ssd1306_WriteString>
					break;
 80005be:	e010      	b.n	80005e2 <main+0x13a>
				case 4:
					ssd1306_WriteString(currentString, Font_16x26, White);
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <main+0x168>)
 80005c2:	1d38      	adds	r0, r7, #4
 80005c4:	2301      	movs	r3, #1
 80005c6:	6811      	ldr	r1, [r2, #0]
 80005c8:	6852      	ldr	r2, [r2, #4]
 80005ca:	f000 fc7b 	bl	8000ec4 <ssd1306_WriteString>
					break;
 80005ce:	e008      	b.n	80005e2 <main+0x13a>
				default:
					ssd1306_Fill(White);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f000 fb29 	bl	8000c28 <ssd1306_Fill>
					a=0;
 80005d6:	2308      	movs	r3, #8
 80005d8:	33ff      	adds	r3, #255	; 0xff
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
					break;
 80005e0:	46c0      	nop			; (mov r8, r8)
			}
			ssd1306_UpdateScreen();
 80005e2:	f000 fb45 	bl	8000c70 <ssd1306_UpdateScreen>
	  HAL_GPIO_TogglePin(USER_LED_GREEN_GPIO_Port , USER_LED_GREEN_Pin);
 80005e6:	e7a9      	b.n	800053c <main+0x94>
 80005e8:	fffffefc 	.word	0xfffffefc
 80005ec:	08003a34 	.word	0x08003a34
 80005f0:	20000004 	.word	0x20000004
 80005f4:	08003a0c 	.word	0x08003a0c
 80005f8:	08003a2c 	.word	0x08003a2c
 80005fc:	2000012c 	.word	0x2000012c
 8000600:	08003b34 	.word	0x08003b34
 8000604:	2000000c 	.word	0x2000000c
 8000608:	20000014 	.word	0x20000014
 800060c:	20000024 	.word	0x20000024
 8000610:	2000001c 	.word	0x2000001c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b09f      	sub	sp, #124	; 0x7c
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	2440      	movs	r4, #64	; 0x40
 800061c:	193b      	adds	r3, r7, r4
 800061e:	0018      	movs	r0, r3
 8000620:	2338      	movs	r3, #56	; 0x38
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f003 f9dd 	bl	80039e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062a:	232c      	movs	r3, #44	; 0x2c
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	2314      	movs	r3, #20
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f003 f9d5 	bl	80039e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	2328      	movs	r3, #40	; 0x28
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f003 f9ce 	bl	80039e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <SystemClock_Config+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a2a      	ldr	r2, [pc, #168]	; (80006f8 <SystemClock_Config+0xe4>)
 800064e:	401a      	ands	r2, r3
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xe0>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0109      	lsls	r1, r1, #4
 8000656:	430a      	orrs	r2, r1
 8000658:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	0021      	movs	r1, r4
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	22a0      	movs	r2, #160	; 0xa0
 8000666:	02d2      	lsls	r2, r2, #11
 8000668:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0252      	lsls	r2, r2, #9
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	22c0      	movs	r2, #192	; 0xc0
 800067c:	0312      	lsls	r2, r2, #12
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	187b      	adds	r3, r7, r1
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fcd4 	bl	8002038 <HAL_RCC_OscConfig>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000694:	f000 f930 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	212c      	movs	r1, #44	; 0x2c
 800069a:	187b      	adds	r3, r7, r1
 800069c:	220f      	movs	r2, #15
 800069e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2203      	movs	r2, #3
 80006a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 f88f 	bl	80027e0 <HAL_RCC_ClockConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c6:	f000 f917 	bl	80008f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	220a      	movs	r2, #10
 80006ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 faa2 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80006e8:	f000 f906 	bl	80008f8 <Error_Handler>
  }
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b01f      	add	sp, #124	; 0x7c
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40007000 	.word	0x40007000
 80006f8:	ffffe7ff 	.word	0xffffe7ff

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_I2C1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_I2C1_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_I2C1_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C1_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2C1_Init+0x74>)
 8000738:	0018      	movs	r0, r3
 800073a:	f000 ff89 	bl	8001650 <HAL_I2C_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000742:	f000 f8d9 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2C1_Init+0x74>)
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fbdc 	bl	8001f08 <HAL_I2CEx_ConfigAnalogFilter>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f8d0 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_I2C1_Init+0x74>)
 800075a:	2100      	movs	r1, #0
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fc1f 	bl	8001fa0 <HAL_I2CEx_ConfigDigitalFilter>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8c7 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000050 	.word	0x20000050
 8000774:	40005400 	.word	0x40005400
 8000778:	00707cbb 	.word	0x00707cbb

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_USART2_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000788:	22e1      	movs	r2, #225	; 0xe1
 800078a:	0252      	lsls	r2, r2, #9
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fbcf 	bl	8002f64 <HAL_UART_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f895 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000a4 	.word	0x200000a4
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	2414      	movs	r4, #20
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2314      	movs	r3, #20
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 f8f9 	bl	80039e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <MX_GPIO_Init+0xe8>)
 80007f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <MX_GPIO_Init+0xe8>)
 80007f8:	2104      	movs	r1, #4
 80007fa:	430a      	orrs	r2, r1
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fe:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xe8>)
 800080c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	430a      	orrs	r2, r1
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xe8>)
 800083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000840:	2102      	movs	r1, #2
 8000842:	430a      	orrs	r2, r1
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	2202      	movs	r2, #2
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GREEN_GPIO_Port, USER_LED_GREEN_Pin, GPIO_PIN_RESET);
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fea4 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BLUE_PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BLUE_PUSHBUTTON_Pin;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0192      	lsls	r2, r2, #6
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2284      	movs	r2, #132	; 0x84
 800086c:	0392      	lsls	r2, r2, #14
 800086e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BLUE_PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_GPIO_Init+0xec>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fd15 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_GREEN_Pin */
  GPIO_InitStruct.Pin = USER_LED_GREEN_Pin;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2220      	movs	r2, #32
 8000888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2201      	movs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089c:	187a      	adds	r2, r7, r1
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fd01 	bl	80012ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2007      	movs	r0, #7
 80008b0:	f000 fcca 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008b4:	2007      	movs	r0, #7
 80008b6:	f000 fcdc 	bl	8001272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b00b      	add	sp, #44	; 0x2c
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	50000800 	.word	0x50000800

080008cc <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO_PIN is BLUE_PUSH_BUTTON_RESET_RED_LED_Pin: Manual reset switch for the red led.
 *
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == USER_BLUE_PUSHBUTTON_Pin)
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	019b      	lsls	r3, r3, #6
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d102      	bne.n	80008ea <HAL_GPIO_EXTI_Callback+0x1e>
  {
    changeFont = true;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x28>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
  }
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	2000012c 	.word	0x2000012c

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_MspInit+0x24>)
 800090a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x24>)
 800090e:	2101      	movs	r1, #1
 8000910:	430a      	orrs	r2, r1
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <HAL_MspInit+0x24>)
 8000916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_MspInit+0x24>)
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	0549      	lsls	r1, r1, #21
 800091e:	430a      	orrs	r2, r1
 8000920:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	240c      	movs	r4, #12
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 f850 	bl	80039e4 <memset>
  if(hi2c->Instance==I2C1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <HAL_I2C_MspInit+0x80>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d129      	bne.n	80009a2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 8000950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 8000954:	2102      	movs	r1, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 800095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095e:	2202      	movs	r2, #2
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	22c0      	movs	r2, #192	; 0xc0
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096e:	0021      	movs	r1, r4
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2212      	movs	r2, #18
 8000974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2203      	movs	r2, #3
 8000980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2204      	movs	r2, #4
 8000986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	187b      	adds	r3, r7, r1
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_I2C_MspInit+0x88>)
 800098c:	0019      	movs	r1, r3
 800098e:	0010      	movs	r0, r2
 8000990:	f000 fc8c 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 8000996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0389      	lsls	r1, r1, #14
 800099e:	430a      	orrs	r2, r1
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b009      	add	sp, #36	; 0x24
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40005400 	.word	0x40005400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000400 	.word	0x50000400

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	240c      	movs	r4, #12
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f003 f80a 	bl	80039e4 <memset>
  if(huart->Instance==USART2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d129      	bne.n	8000a2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0289      	lsls	r1, r1, #10
 80009e4:	430a      	orrs	r2, r1
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	430a      	orrs	r2, r1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a00:	0021      	movs	r1, r4
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	220c      	movs	r2, #12
 8000a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2203      	movs	r2, #3
 8000a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	23a0      	movs	r3, #160	; 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fc3f 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b009      	add	sp, #36	; 0x24
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 fb04 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BLUE_PUSHBUTTON_Pin);
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fdce 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f7ff fff7 	bl	8000a82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000aba:	f002 ff6f 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fcf3 	bl	80004a8 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
   ldr   r0, =_estack
 8000ac4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000ad0:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 8000ad4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ad8:	2000033c 	.word	0x2000033c

08000adc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_COMP_IRQHandler>

08000ade <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af04      	add	r7, sp, #16
 8000aee:	0002      	movs	r2, r0
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <ssd1306_WriteCommand+0x30>)
 8000af6:	2301      	movs	r3, #1
 8000af8:	425b      	negs	r3, r3
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2301      	movs	r3, #1
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2200      	movs	r2, #0
 8000b08:	2178      	movs	r1, #120	; 0x78
 8000b0a:	f000 fe37 	bl	800177c <HAL_I2C_Mem_Write>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	20000050 	.word	0x20000050

08000b1c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <ssd1306_WriteData+0x30>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4252      	negs	r2, r2
 8000b30:	9202      	str	r2, [sp, #8]
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	2178      	movs	r1, #120	; 0x78
 8000b3e:	f000 fe1d 	bl	800177c <HAL_I2C_Mem_Write>
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000050 	.word	0x20000050

08000b50 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b54:	f7ff ffc3 	bl	8000ade <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f000 faa5 	bl	80010a8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 fa0c 	bl	8000f7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b64:	2020      	movs	r0, #32
 8000b66:	f7ff ffbf 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ffbc 	bl	8000ae8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b70:	20b0      	movs	r0, #176	; 0xb0
 8000b72:	f7ff ffb9 	bl	8000ae8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b76:	20c8      	movs	r0, #200	; 0xc8
 8000b78:	f7ff ffb6 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ffb3 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b82:	2010      	movs	r0, #16
 8000b84:	f7ff ffb0 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b88:	2040      	movs	r0, #64	; 0x40
 8000b8a:	f7ff ffad 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b8e:	20ff      	movs	r0, #255	; 0xff
 8000b90:	f000 f9dc 	bl	8000f4c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b94:	20a1      	movs	r0, #161	; 0xa1
 8000b96:	f7ff ffa7 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b9a:	20a6      	movs	r0, #166	; 0xa6
 8000b9c:	f7ff ffa4 	bl	8000ae8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ba0:	20a8      	movs	r0, #168	; 0xa8
 8000ba2:	f7ff ffa1 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000ba6:	201f      	movs	r0, #31
 8000ba8:	f7ff ff9e 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bac:	20a4      	movs	r0, #164	; 0xa4
 8000bae:	f7ff ff9b 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bb2:	20d3      	movs	r0, #211	; 0xd3
 8000bb4:	f7ff ff98 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ff95 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bbe:	20d5      	movs	r0, #213	; 0xd5
 8000bc0:	f7ff ff92 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bc4:	20f0      	movs	r0, #240	; 0xf0
 8000bc6:	f7ff ff8f 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bca:	20d9      	movs	r0, #217	; 0xd9
 8000bcc:	f7ff ff8c 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bd0:	2022      	movs	r0, #34	; 0x22
 8000bd2:	f7ff ff89 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bd6:	20da      	movs	r0, #218	; 0xda
 8000bd8:	f7ff ff86 	bl	8000ae8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff ff83 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000be2:	20db      	movs	r0, #219	; 0xdb
 8000be4:	f7ff ff80 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000be8:	2020      	movs	r0, #32
 8000bea:	f7ff ff7d 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bee:	208d      	movs	r0, #141	; 0x8d
 8000bf0:	f7ff ff7a 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	f7ff ff77 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 f9be 	bl	8000f7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f811 	bl	8000c28 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c06:	f000 f833 	bl	8000c70 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <ssd1306_Init+0xd4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <ssd1306_Init+0xd4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <ssd1306_Init+0xd4>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	711a      	strb	r2, [r3, #4]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000330 	.word	0x20000330

08000c28 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	0002      	movs	r2, r0
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00e      	b.n	8000c58 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <ssd1306_Fill+0x1e>
 8000c42:	2100      	movs	r1, #0
 8000c44:	e000      	b.n	8000c48 <ssd1306_Fill+0x20>
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <ssd1306_Fill+0x44>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	1c0a      	adds	r2, r1, #0
 8000c50:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3eb      	bcc.n	8000c3a <ssd1306_Fill+0x12>
    }
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000130 	.word	0x20000130

08000c70 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e01a      	b.n	8000cb4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3b50      	subs	r3, #80	; 0x50
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff2e 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff2b 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c92:	2010      	movs	r0, #16
 8000c94:	f7ff ff28 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	01da      	lsls	r2, r3, #7
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <ssd1306_UpdateScreen+0x58>)
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff39 	bl	8000b1c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d9e0      	bls.n	8000c7e <ssd1306_UpdateScreen+0xe>
    }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000130 	.word	0x20000130

08000ccc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	0008      	movs	r0, r1
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	1c22      	adds	r2, r4, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	1c02      	adds	r2, r0, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	1d7b      	adds	r3, r7, #5
 8000ce6:	1c0a      	adds	r2, r1, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db47      	blt.n	8000d84 <ssd1306_DrawPixel+0xb8>
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d843      	bhi.n	8000d84 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cfc:	1d7b      	adds	r3, r7, #5
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d11e      	bne.n	8000d42 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	0003      	movs	r3, r0
 8000d12:	01db      	lsls	r3, r3, #7
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <ssd1306_DrawPixel+0xc0>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	b25a      	sxtb	r2, r3
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2107      	movs	r1, #7
 8000d22:	400b      	ands	r3, r1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4099      	lsls	r1, r3
 8000d28:	000b      	movs	r3, r1
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b259      	sxtb	r1, r3
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	0003      	movs	r3, r0
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	b2c9      	uxtb	r1, r1
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <ssd1306_DrawPixel+0xc0>)
 8000d3e:	54d1      	strb	r1, [r2, r3]
 8000d40:	e021      	b.n	8000d86 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	1dbb      	adds	r3, r7, #6
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	b2d8      	uxtb	r0, r3
 8000d4e:	0003      	movs	r3, r0
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <ssd1306_DrawPixel+0xc0>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	1dba      	adds	r2, r7, #6
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	2107      	movs	r1, #7
 8000d60:	400a      	ands	r2, r1
 8000d62:	2101      	movs	r1, #1
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	b252      	sxtb	r2, r2
 8000d6a:	43d2      	mvns	r2, r2
 8000d6c:	b252      	sxtb	r2, r2
 8000d6e:	4013      	ands	r3, r2
 8000d70:	b259      	sxtb	r1, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	0003      	movs	r3, r0
 8000d78:	01db      	lsls	r3, r3, #7
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	b2c9      	uxtb	r1, r1
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <ssd1306_DrawPixel+0xc0>)
 8000d80:	54d1      	strb	r1, [r2, r3]
 8000d82:	e000      	b.n	8000d86 <ssd1306_DrawPixel+0xba>
        return;
 8000d84:	46c0      	nop			; (mov r8, r8)
    }
}
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	20000130 	.word	0x20000130

08000d90 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	0004      	movs	r4, r0
 8000d98:	1d38      	adds	r0, r7, #4
 8000d9a:	6001      	str	r1, [r0, #0]
 8000d9c:	6042      	str	r2, [r0, #4]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	200f      	movs	r0, #15
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	1c22      	adds	r2, r4, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	230e      	movs	r3, #14
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	1c0a      	adds	r2, r1, #0
 8000dae:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b1f      	cmp	r3, #31
 8000db6:	d903      	bls.n	8000dc0 <ssd1306_WriteChar+0x30>
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7e      	cmp	r3, #126	; 0x7e
 8000dbe:	d901      	bls.n	8000dc4 <ssd1306_WriteChar+0x34>
        return 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e078      	b.n	8000eb6 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dc4:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	2b80      	cmp	r3, #128	; 0x80
 8000dd2:	dc07      	bgt.n	8000de4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000dd6:	885b      	ldrh	r3, [r3, #2]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	dd01      	ble.n	8000de8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e066      	b.n	8000eb6 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e051      	b.n	8000e92 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	230f      	movs	r3, #15
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3b20      	subs	r3, #32
 8000dfa:	1d39      	adds	r1, r7, #4
 8000dfc:	7849      	ldrb	r1, [r1, #1]
 8000dfe:	434b      	muls	r3, r1
 8000e00:	0019      	movs	r1, r3
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	18cb      	adds	r3, r1, r3
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	e035      	b.n	8000e80 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d014      	beq.n	8000e4c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000e32:	885b      	ldrh	r3, [r3, #2]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	18d3      	adds	r3, r2, r3
 8000e3c:	b2d9      	uxtb	r1, r3
 8000e3e:	230e      	movs	r3, #14
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	f7ff ff41 	bl	8000ccc <ssd1306_DrawPixel>
 8000e4a:	e016      	b.n	8000e7a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	18d3      	adds	r3, r2, r3
 8000e58:	b2d8      	uxtb	r0, r3
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	b2d9      	uxtb	r1, r3
 8000e68:	230e      	movs	r3, #14
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	425a      	negs	r2, r3
 8000e70:	4153      	adcs	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	001a      	movs	r2, r3
 8000e76:	f7ff ff29 	bl	8000ccc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d3c3      	bcc.n	8000e14 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	001a      	movs	r2, r3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d3a7      	bcc.n	8000dee <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000ea0:	881a      	ldrh	r2, [r3, #0]
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <ssd1306_WriteChar+0x130>)
 8000eae:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b009      	add	sp, #36	; 0x24
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000330 	.word	0x20000330

08000ec4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	1d38      	adds	r0, r7, #4
 8000ece:	6001      	str	r1, [r0, #0]
 8000ed0:	6042      	str	r2, [r0, #4]
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	1cfb      	adds	r3, r7, #3
 8000ed6:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8000ed8:	e014      	b.n	8000f04 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	7818      	ldrb	r0, [r3, #0]
 8000ede:	1cfb      	adds	r3, r7, #3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	1d3a      	adds	r2, r7, #4
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	6852      	ldr	r2, [r2, #4]
 8000ee8:	f7ff ff52 	bl	8000d90 <ssd1306_WriteChar>
 8000eec:	0003      	movs	r3, r0
 8000eee:	001a      	movs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d002      	beq.n	8000efe <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <ssd1306_WriteString+0x4c>
        }
        str++;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1e6      	bne.n	8000eda <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b004      	add	sp, #16
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	0002      	movs	r2, r0
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	1c0a      	adds	r2, r1, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <ssd1306_SetCursor+0x30>)
 8000f32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <ssd1306_SetCursor+0x30>)
 8000f3c:	805a      	strh	r2, [r3, #2]
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000330 	.word	0x20000330

08000f4c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f58:	210f      	movs	r1, #15
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2281      	movs	r2, #129	; 0x81
 8000f5e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff fdbf 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff fdba 	bl	8000ae8 <ssd1306_WriteCommand>
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b004      	add	sp, #16
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0002      	movs	r2, r0
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	22af      	movs	r2, #175	; 0xaf
 8000f96:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <ssd1306_SetDisplayOn+0x48>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	715a      	strb	r2, [r3, #5]
 8000f9e:	e006      	b.n	8000fae <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	22ae      	movs	r2, #174	; 0xae
 8000fa6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <ssd1306_SetDisplayOn+0x48>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff fd97 	bl	8000ae8 <ssd1306_WriteCommand>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000330 	.word	0x20000330

08000fc8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x3c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Init+0x3c>)
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f811 	bl	8001008 <HAL_InitTick>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	e001      	b.n	8000ff6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff2:	f7ff fc87 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_InitTick+0x5c>)
 8001012:	681c      	ldr	r4, [r3, #0]
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_InitTick+0x60>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0019      	movs	r1, r3
 800101a:	23fa      	movs	r3, #250	; 0xfa
 800101c:	0098      	lsls	r0, r3, #2
 800101e:	f7ff f873 	bl	8000108 <__udivsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	0020      	movs	r0, r4
 8001028:	f7ff f86e 	bl	8000108 <__udivsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f92f 	bl	8001292 <HAL_SYSTICK_Config>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e00f      	b.n	800105c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d80b      	bhi.n	800105a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	2200      	movs	r2, #0
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f8fc 	bl	8001248 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_InitTick+0x64>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b003      	add	sp, #12
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000030 	.word	0x20000030
 800106c:	2000002c 	.word	0x2000002c

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_IncTick+0x20>)
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000030 	.word	0x20000030
 8001090:	20000338 	.word	0x20000338

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000338 	.word	0x20000338

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff0 	bl	8001094 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	001a      	movs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	189b      	adds	r3, r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	f7ff ffe0 	bl	8001094 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000030 	.word	0x20000030

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b7f      	cmp	r3, #127	; 0x7f
 8001102:	d809      	bhi.n	8001118 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	001a      	movs	r2, r3
 800110a:	231f      	movs	r3, #31
 800110c:	401a      	ands	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_EnableIRQ+0x30>)
 8001110:	2101      	movs	r1, #1
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b7f      	cmp	r3, #127	; 0x7f
 8001138:	d828      	bhi.n	800118c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	33c0      	adds	r3, #192	; 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	; 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	481f      	ldr	r0, [pc, #124]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	33c0      	adds	r3, #192	; 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800118a:	e031      	b.n	80011f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <__NVIC_SetPriority+0xd8>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0019      	movs	r1, r3
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
 8001198:	3b08      	subs	r3, #8
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3306      	adds	r3, #6
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	001c      	movs	r4, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	4023      	ands	r3, r4
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	430a      	orrs	r2, r1
 80011e6:	3306      	adds	r3, #6
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	18c3      	adds	r3, r0, r3
 80011ec:	3304      	adds	r3, #4
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	045b      	lsls	r3, r3, #17
 8001210:	429a      	cmp	r2, r3
 8001212:	d301      	bcc.n	8001218 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001214:	2301      	movs	r3, #1
 8001216:	e010      	b.n	800123a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SysTick_Config+0x44>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3a01      	subs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	2103      	movs	r1, #3
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff7c 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x44>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x44>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	210f      	movs	r1, #15
 8001254:	187b      	adds	r3, r7, r1
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	187b      	adds	r3, r7, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	0011      	movs	r1, r2
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	0002      	movs	r2, r0
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ffaf 	bl	8001200 <SysTick_Config>
 80012a2:	0003      	movs	r3, r0
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012c2:	e155      	b.n	8001570 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <HAL_GPIO_Init+0x30>
 80012da:	e146      	b.n	800156a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	2201      	movs	r2, #1
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	2b03      	cmp	r3, #3
 8001360:	d017      	beq.n	8001392 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d123      	bne.n	80013e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2207      	movs	r2, #7
 80013b0:	4013      	ands	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2107      	movs	r1, #7
 80013ca:	400b      	ands	r3, r1
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	401a      	ands	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	23c0      	movs	r3, #192	; 0xc0
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_GPIO_Init+0x17c>
 8001426:	e0a0      	b.n	800156a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001428:	4b57      	ldr	r3, [pc, #348]	; (8001588 <HAL_GPIO_Init+0x2dc>)
 800142a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142c:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2dc>)
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001434:	4a55      	ldr	r2, [pc, #340]	; (800158c <HAL_GPIO_Init+0x2e0>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	589b      	ldr	r3, [r3, r2]
 8001440:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2203      	movs	r2, #3
 8001446:	4013      	ands	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	409a      	lsls	r2, r3
 800144e:	0013      	movs	r3, r2
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	429a      	cmp	r2, r3
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x1f6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <HAL_GPIO_Init+0x2e4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x1f2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a49      	ldr	r2, [pc, #292]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x1ee>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a48      	ldr	r2, [pc, #288]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x1ea>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_GPIO_Init+0x2f0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x1e6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <HAL_GPIO_Init+0x2f4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x1e2>
 800148a:	2305      	movs	r3, #5
 800148c:	e00a      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 800148e:	2306      	movs	r3, #6
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 8001492:	2304      	movs	r3, #4
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x1f8>
 80014a2:	2300      	movs	r3, #0
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	2103      	movs	r1, #3
 80014a8:	400a      	ands	r2, r1
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2e0>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	035b      	lsls	r3, r3, #13
 80014da:	4013      	ands	r3, r2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	039b      	lsls	r3, r3, #14
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	029b      	lsls	r3, r3, #10
 800152e:	4013      	ands	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	40da      	lsrs	r2, r3
 8001578:	1e13      	subs	r3, r2, #0
 800157a:	d000      	beq.n	800157e <HAL_GPIO_Init+0x2d2>
 800157c:	e6a2      	b.n	80012c4 <HAL_GPIO_Init+0x18>
  }
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b006      	add	sp, #24
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	50000400 	.word	0x50000400
 8001594:	50000800 	.word	0x50000800
 8001598:	50000c00 	.word	0x50000c00
 800159c:	50001000 	.word	0x50001000
 80015a0:	50001c00 	.word	0x50001c00
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	0008      	movs	r0, r1
 80015b2:	0011      	movs	r1, r2
 80015b4:	1cbb      	adds	r3, r7, #2
 80015b6:	1c02      	adds	r2, r0, #0
 80015b8:	801a      	strh	r2, [r3, #0]
 80015ba:	1c7b      	adds	r3, r7, #1
 80015bc:	1c0a      	adds	r2, r1, #0
 80015be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	1c7b      	adds	r3, r7, #1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015d2:	1cbb      	adds	r3, r7, #2
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	000a      	movs	r2, r1
 80015ec:	1cbb      	adds	r3, r7, #2
 80015ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	041a      	lsls	r2, r3, #16
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	1cb9      	adds	r1, r7, #2
 8001606:	8809      	ldrh	r1, [r1, #0]
 8001608:	400b      	ands	r3, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	1dba      	adds	r2, r7, #6
 800162a:	8812      	ldrh	r2, [r2, #0]
 800162c:	4013      	ands	r3, r2
 800162e:	d008      	beq.n	8001642 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001632:	1dba      	adds	r2, r7, #6
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff f945 	bl	80008cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e082      	b.n	8001768 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d107      	bne.n	800167e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff f957 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	2124      	movs	r1, #36	; 0x24
 8001684:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	438a      	bics	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4934      	ldr	r1, [pc, #208]	; (8001770 <HAL_I2C_Init+0x120>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4931      	ldr	r1, [pc, #196]	; (8001774 <HAL_I2C_Init+0x124>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	0209      	lsls	r1, r1, #8
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e007      	b.n	80016de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2184      	movs	r1, #132	; 0x84
 80016d8:	0209      	lsls	r1, r1, #8
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d104      	bne.n	80016f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	491f      	ldr	r1, [pc, #124]	; (8001778 <HAL_I2C_Init+0x128>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	491a      	ldr	r1, [pc, #104]	; (8001774 <HAL_I2C_Init+0x124>)
 800170c:	400a      	ands	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	431a      	orrs	r2, r3
 800171a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69d9      	ldr	r1, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2241      	movs	r2, #65	; 0x41
 8001754:	2120      	movs	r1, #32
 8001756:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2242      	movs	r2, #66	; 0x42
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}
 8001770:	f0ffffff 	.word	0xf0ffffff
 8001774:	ffff7fff 	.word	0xffff7fff
 8001778:	02008000 	.word	0x02008000

0800177c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	000c      	movs	r4, r1
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	230a      	movs	r3, #10
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	1c22      	adds	r2, r4, #0
 8001790:	801a      	strh	r2, [r3, #0]
 8001792:	2308      	movs	r3, #8
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	1c02      	adds	r2, r0, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	1c0a      	adds	r2, r1, #0
 800179e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2241      	movs	r2, #65	; 0x41
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d000      	beq.n	80017ae <HAL_I2C_Mem_Write+0x32>
 80017ac:	e10c      	b.n	80019c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_I2C_Mem_Write+0x42>
 80017b4:	232c      	movs	r3, #44	; 0x2c
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0ff      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2240      	movs	r2, #64	; 0x40
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_I2C_Mem_Write+0x5c>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e0f8      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017e0:	f7ff fc58 	bl	8001094 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	0219      	lsls	r1, r3, #8
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2319      	movs	r3, #25
 80017f4:	2201      	movs	r2, #1
 80017f6:	f000 f975 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0e3      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2241      	movs	r2, #65	; 0x41
 8001806:	2121      	movs	r1, #33	; 0x21
 8001808:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2242      	movs	r2, #66	; 0x42
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	222c      	movs	r2, #44	; 0x2c
 8001822:	18ba      	adds	r2, r7, r2
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	881c      	ldrh	r4, [r3, #0]
 8001832:	2308      	movs	r3, #8
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	881a      	ldrh	r2, [r3, #0]
 8001838:	230a      	movs	r3, #10
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	8819      	ldrh	r1, [r3, #0]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	0023      	movs	r3, r4
 800184a:	f000 f8c5 	bl	80019d8 <I2C_RequestMemoryWrite>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d005      	beq.n	800185e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0b5      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2bff      	cmp	r3, #255	; 0xff
 8001866:	d911      	bls.n	800188c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	045c      	lsls	r4, r3, #17
 8001878:	230a      	movs	r3, #10
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0023      	movs	r3, r4
 8001886:	f000 fb05 	bl	8001e94 <I2C_TransferConfig>
 800188a:	e012      	b.n	80018b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	b2da      	uxtb	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	049c      	lsls	r4, r3, #18
 80018a0:	230a      	movs	r3, #10
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	8819      	ldrh	r1, [r3, #0]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	0023      	movs	r3, r4
 80018ae:	f000 faf1 	bl	8001e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f961 	bl	8001b80 <I2C_WaitOnTXISFlagUntilTimeout>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e081      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03a      	beq.n	8001976 <HAL_I2C_Mem_Write+0x1fa>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d136      	bne.n	8001976 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0013      	movs	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	f000 f8e5 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e053      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	d911      	bls.n	8001950 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	045c      	lsls	r4, r3, #17
 800193c:	230a      	movs	r3, #10
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	0023      	movs	r3, r4
 800194a:	f000 faa3 	bl	8001e94 <I2C_TransferConfig>
 800194e:	e012      	b.n	8001976 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	049c      	lsls	r4, r3, #18
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f000 fa8f 	bl	8001e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d198      	bne.n	80018b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 f940 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01a      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_I2C_Mem_Write+0x258>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2241      	movs	r2, #65	; 0x41
 80019b0:	2120      	movs	r1, #32
 80019b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2242      	movs	r2, #66	; 0x42
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b007      	add	sp, #28
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	fe00e800 	.word	0xfe00e800

080019d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	000c      	movs	r4, r1
 80019e2:	0010      	movs	r0, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	250a      	movs	r5, #10
 80019e8:	197b      	adds	r3, r7, r5
 80019ea:	1c22      	adds	r2, r4, #0
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	2308      	movs	r3, #8
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	1c02      	adds	r2, r0, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	1dbb      	adds	r3, r7, #6
 80019f8:	1c0a      	adds	r2, r1, #0
 80019fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	045c      	lsls	r4, r3, #17
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <I2C_RequestMemoryWrite+0xc4>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	0023      	movs	r3, r4
 8001a12:	f000 fa3f 	bl	8001e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	6a39      	ldr	r1, [r7, #32]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 f8af 	bl	8001b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e033      	b.n	8001a92 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a32:	2308      	movs	r3, #8
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a40:	e019      	b.n	8001a76 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a42:	2308      	movs	r3, #8
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f890 	bl	8001b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e014      	b.n	8001a92 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a68:	2308      	movs	r3, #8
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	0013      	movs	r3, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	f000 f82e 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d001      	beq.n	8001a90 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	80002000 	.word	0x80002000

08001aa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d007      	beq.n	8001adc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	619a      	str	r2, [r3, #24]
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e030      	b.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	d02d      	beq.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afc:	f7ff faca 	bl	8001094 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d302      	bcc.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d122      	bne.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	425a      	negs	r2, r3
 8001b22:	4153      	adcs	r3, r2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	001a      	movs	r2, r3
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d113      	bne.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	2220      	movs	r2, #32
 8001b36:	431a      	orrs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2241      	movs	r2, #65	; 0x41
 8001b40:	2120      	movs	r1, #32
 8001b42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2242      	movs	r2, #66	; 0x42
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00f      	b.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	425a      	negs	r2, r3
 8001b68:	4153      	adcs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d0bf      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b8c:	e032      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f87d 	bl	8001c94 <I2C_IsErrorOccurred>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e030      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	d025      	beq.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba8:	f7ff fa74 	bl	8001094 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d302      	bcc.n	8001bbe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11a      	bne.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d013      	beq.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2241      	movs	r2, #65	; 0x41
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2242      	movs	r2, #66	; 0x42
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e007      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d1c5      	bne.n	8001b8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b004      	add	sp, #16
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c18:	e02f      	b.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 f837 	bl	8001c94 <I2C_IsErrorOccurred>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e02d      	b.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff fa31 	bl	8001094 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11a      	bne.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d013      	beq.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	2220      	movs	r2, #32
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2241      	movs	r2, #65	; 0x41
 8001c62:	2120      	movs	r1, #32
 8001c64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2242      	movs	r2, #66	; 0x42
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e007      	b.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d1c8      	bne.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08b      	sub	sp, #44	; 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	2327      	movs	r3, #39	; 0x27
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2210      	movs	r2, #16
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <I2C_IsErrorOccurred+0x2e>
 8001cc0:	e082      	b.n	8001dc8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cca:	e060      	b.n	8001d8e <I2C_IsErrorOccurred+0xfa>
 8001ccc:	2427      	movs	r4, #39	; 0x27
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	193a      	adds	r2, r7, r4
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	d058      	beq.n	8001d8e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cdc:	f7ff f9da 	bl	8001094 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d306      	bcc.n	8001cfa <I2C_IsErrorOccurred+0x66>
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	193a      	adds	r2, r7, r4
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d149      	bne.n	8001d8e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d08:	2013      	movs	r0, #19
 8001d0a:	183b      	adds	r3, r7, r0
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	2142      	movs	r1, #66	; 0x42
 8001d10:	5c52      	ldrb	r2, [r2, r1]
 8001d12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d126      	bne.n	8001d76 <I2C_IsErrorOccurred+0xe2>
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	01db      	lsls	r3, r3, #7
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d021      	beq.n	8001d76 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d01d      	beq.n	8001d76 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	01c9      	lsls	r1, r1, #7
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d4c:	f7ff f9a2 	bl	8001094 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d54:	e00f      	b.n	8001d76 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d56:	f7ff f99d 	bl	8001094 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b19      	cmp	r3, #25
 8001d62:	d908      	bls.n	8001d76 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2220      	movs	r2, #32
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d6c:	2327      	movs	r3, #39	; 0x27
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]

              break;
 8001d74:	e00b      	b.n	8001d8e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2127      	movs	r1, #39	; 0x27
 8001d82:	187a      	adds	r2, r7, r1
 8001d84:	1879      	adds	r1, r7, r1
 8001d86:	7809      	ldrb	r1, [r1, #0]
 8001d88:	7011      	strb	r1, [r2, #0]
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d1e3      	bne.n	8001d56 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2220      	movs	r2, #32
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d004      	beq.n	8001da6 <I2C_IsErrorOccurred+0x112>
 8001d9c:	2327      	movs	r3, #39	; 0x27
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d092      	beq.n	8001ccc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001da6:	2327      	movs	r3, #39	; 0x27
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d103      	bne.n	8001db8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2220      	movs	r2, #32
 8001db6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dc0:	2327      	movs	r3, #39	; 0x27
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d00c      	beq.n	8001df4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4313      	orrs	r3, r2
 8001de0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	0052      	lsls	r2, r2, #1
 8001dea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dec:	2327      	movs	r3, #39	; 0x27
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d00c      	beq.n	8001e18 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2208      	movs	r2, #8
 8001e02:	4313      	orrs	r3, r2
 8001e04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e10:	2327      	movs	r3, #39	; 0x27
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d00c      	beq.n	8001e3c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	2202      	movs	r2, #2
 8001e26:	4313      	orrs	r3, r2
 8001e28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e34:	2327      	movs	r3, #39	; 0x27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e3c:	2327      	movs	r3, #39	; 0x27
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01d      	beq.n	8001e82 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fe29 	bl	8001aa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	490d      	ldr	r1, [pc, #52]	; (8001e90 <I2C_IsErrorOccurred+0x1fc>)
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2241      	movs	r2, #65	; 0x41
 8001e6e:	2120      	movs	r1, #32
 8001e70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2242      	movs	r2, #66	; 0x42
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2240      	movs	r2, #64	; 0x40
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001e82:	2327      	movs	r3, #39	; 0x27
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b00b      	add	sp, #44	; 0x2c
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	fe00e800 	.word	0xfe00e800

08001e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	0008      	movs	r0, r1
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	240a      	movs	r4, #10
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	1c02      	adds	r2, r0, #0
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	2009      	movs	r0, #9
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	1c0a      	adds	r2, r1, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	059b      	lsls	r3, r3, #22
 8001eb8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	0419      	lsls	r1, r3, #16
 8001ec0:	23ff      	movs	r3, #255	; 0xff
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ede:	0d51      	lsrs	r1, r2, #21
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	00d2      	lsls	r2, r2, #3
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	4907      	ldr	r1, [pc, #28]	; (8001f04 <I2C_TransferConfig+0x70>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	43d2      	mvns	r2, r2
 8001eec:	401a      	ands	r2, r3
 8001eee:	0011      	movs	r1, r2
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b007      	add	sp, #28
 8001f00:	bd90      	pop	{r4, r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	03ff63ff 	.word	0x03ff63ff

08001f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	; 0x41
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d138      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e032      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2241      	movs	r2, #65	; 0x41
 8001f38:	2124      	movs	r1, #36	; 0x24
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4911      	ldr	r1, [pc, #68]	; (8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	ffffefff 	.word	0xffffefff

08001fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2241      	movs	r2, #65	; 0x41
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d139      	bne.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e033      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2241      	movs	r2, #65	; 0x41
 8001fd0:	2124      	movs	r1, #36	; 0x24
 8001fd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	2120      	movs	r1, #32
 800201c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	fffff0ff 	.word	0xfffff0ff

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	f000 fbbf 	bl	80027ca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204c:	4bc9      	ldr	r3, [pc, #804]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	220c      	movs	r2, #12
 8002052:	4013      	ands	r3, r2
 8002054:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002056:	4bc7      	ldr	r3, [pc, #796]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d100      	bne.n	800206e <HAL_RCC_OscConfig+0x36>
 800206c:	e07e      	b.n	800216c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d007      	beq.n	8002084 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x68>
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	429a      	cmp	r2, r3
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	4bbb      	ldr	r3, [pc, #748]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x5a>
 8002090:	e06b      	b.n	800216a <HAL_RCC_OscConfig+0x132>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d167      	bne.n	800216a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f000 fb95 	bl	80027ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x84>
 80020ac:	4bb1      	ldr	r3, [pc, #708]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4bb0      	ldr	r3, [pc, #704]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	0249      	lsls	r1, r1, #9
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e027      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	23a0      	movs	r3, #160	; 0xa0
 80020c2:	02db      	lsls	r3, r3, #11
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10e      	bne.n	80020e6 <HAL_RCC_OscConfig+0xae>
 80020c8:	4baa      	ldr	r3, [pc, #680]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4ba9      	ldr	r3, [pc, #676]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	02c9      	lsls	r1, r1, #11
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	4ba7      	ldr	r3, [pc, #668]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4ba6      	ldr	r3, [pc, #664]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0249      	lsls	r1, r1, #9
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e012      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020e6:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4ba2      	ldr	r3, [pc, #648]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020ec:	49a2      	ldr	r1, [pc, #648]	; (8002378 <HAL_RCC_OscConfig+0x340>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4b9c      	ldr	r3, [pc, #624]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b9b      	ldr	r3, [pc, #620]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002106:	499d      	ldr	r1, [pc, #628]	; (800237c <HAL_RCC_OscConfig+0x344>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d015      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe ffbe 	bl	8001094 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211c:	e009      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7fe ffb9 	bl	8001094 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d902      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	f000 fb4c 	bl	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002132:	4b90      	ldr	r3, [pc, #576]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	4013      	ands	r3, r2
 800213c:	d0ef      	beq.n	800211e <HAL_RCC_OscConfig+0xe6>
 800213e:	e015      	b.n	800216c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe ffa8 	bl	8001094 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214a:	f7fe ffa3 	bl	8001094 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	; 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e336      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800215c:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x112>
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d100      	bne.n	8002178 <HAL_RCC_OscConfig+0x140>
 8002176:	e099      	b.n	80022ac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2220      	movs	r2, #32
 8002182:	4013      	ands	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b7a      	ldr	r3, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800218c:	2120      	movs	r1, #32
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	2220      	movs	r2, #32
 8002196:	4393      	bics	r3, r2
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d005      	beq.n	80021ac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d13e      	bne.n	8002224 <HAL_RCC_OscConfig+0x1ec>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13b      	bne.n	8002224 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80021ac:	4b71      	ldr	r3, [pc, #452]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2204      	movs	r2, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_RCC_OscConfig+0x188>
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e304      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x348>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2209      	movs	r2, #9
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e8:	f000 fc42 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80021ec:	0001      	movs	r1, r0
 80021ee:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	220f      	movs	r2, #15
 80021f6:	4013      	ands	r3, r2
 80021f8:	4a62      	ldr	r2, [pc, #392]	; (8002384 <HAL_RCC_OscConfig+0x34c>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	000a      	movs	r2, r1
 80021fe:	40da      	lsrs	r2, r3
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <HAL_RCC_OscConfig+0x350>)
 8002202:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x354>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2513      	movs	r5, #19
 800220a:	197c      	adds	r4, r7, r5
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fefb 	bl	8001008 <HAL_InitTick>
 8002212:	0003      	movs	r3, r0
 8002214:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002216:	197b      	adds	r3, r7, r5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d046      	beq.n	80022ac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800221e:	197b      	adds	r3, r7, r5
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	e2d2      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d027      	beq.n	800227a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800222a:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2209      	movs	r2, #9
 8002230:	4393      	bics	r3, r2
 8002232:	0019      	movs	r1, r3
 8002234:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff2a 	bl	8001094 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe ff25 	bl	8001094 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e2b8      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d0f1      	beq.n	8002246 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a46      	ldr	r2, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x348>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 8002280:	2101      	movs	r1, #1
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff05 	bl	8001094 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe ff00 	bl	8001094 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e293      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022a2:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d1f1      	bne.n	8002290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_OscConfig+0x280>
 80022b6:	e0a2      	b.n	80023fe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d140      	bne.n	8002340 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x29e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e279      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_RCC_OscConfig+0x358>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	0a19      	lsrs	r1, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	061a      	lsls	r2, r3, #24
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	0b5b      	lsrs	r3, r3, #13
 8002304:	3301      	adds	r3, #1
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0212      	lsls	r2, r2, #8
 800230a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	210f      	movs	r1, #15
 8002314:	400b      	ands	r3, r1
 8002316:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x34c>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_RCC_OscConfig+0x350>)
 800231e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_OscConfig+0x354>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2513      	movs	r5, #19
 8002326:	197c      	adds	r4, r7, r5
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe fe6d 	bl	8001008 <HAL_InitTick>
 800232e:	0003      	movs	r3, r0
 8002330:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002332:	197b      	adds	r3, r7, r5
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d061      	beq.n	80023fe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800233a:	197b      	adds	r3, r7, r5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	e244      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d040      	beq.n	80023ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_OscConfig+0x33c>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0049      	lsls	r1, r1, #1
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fe9d 	bl	8001094 <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800235e:	e019      	b.n	8002394 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002360:	f7fe fe98 	bl	8001094 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d912      	bls.n	8002394 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e22b      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	40021000 	.word	0x40021000
 8002378:	fffeffff 	.word	0xfffeffff
 800237c:	fffbffff 	.word	0xfffbffff
 8002380:	ffffe0ff 	.word	0xffffe0ff
 8002384:	08003b48 	.word	0x08003b48
 8002388:	20000000 	.word	0x20000000
 800238c:	2000002c 	.word	0x2000002c
 8002390:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002394:	4bca      	ldr	r3, [pc, #808]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d0df      	beq.n	8002360 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4bc7      	ldr	r3, [pc, #796]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4ac7      	ldr	r2, [pc, #796]	; (80026c4 <HAL_RCC_OscConfig+0x68c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ae:	4bc4      	ldr	r3, [pc, #784]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4bc2      	ldr	r3, [pc, #776]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	0a19      	lsrs	r1, r3, #8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	061a      	lsls	r2, r3, #24
 80023c2:	4bbf      	ldr	r3, [pc, #764]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	e019      	b.n	80023fe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ca:	4bbd      	ldr	r3, [pc, #756]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4bbc      	ldr	r3, [pc, #752]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023d0:	49bd      	ldr	r1, [pc, #756]	; (80026c8 <HAL_RCC_OscConfig+0x690>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fe5d 	bl	8001094 <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e0:	f7fe fe58 	bl	8001094 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1eb      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023f2:	4bb3      	ldr	r3, [pc, #716]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	d036      	beq.n	8002476 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d019      	beq.n	8002444 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002410:	4bab      	ldr	r3, [pc, #684]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002414:	4baa      	ldr	r3, [pc, #680]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002416:	2101      	movs	r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fe3a 	bl	8001094 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002426:	f7fe fe35 	bl	8001094 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1c8      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002438:	4ba1      	ldr	r3, [pc, #644]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800243a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d0f1      	beq.n	8002426 <HAL_RCC_OscConfig+0x3ee>
 8002442:	e018      	b.n	8002476 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002448:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7fe fe20 	bl	8001094 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fe1b 	bl	8001094 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e1ae      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800246c:	4b94      	ldr	r3, [pc, #592]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	2202      	movs	r2, #2
 8002472:	4013      	ands	r3, r2
 8002474:	d1f1      	bne.n	800245a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x44a>
 8002480:	e0ae      	b.n	80025e0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2023      	movs	r0, #35	; 0x23
 8002484:	183b      	adds	r3, r7, r0
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	055b      	lsls	r3, r3, #21
 8002492:	4013      	ands	r3, r2
 8002494:	d109      	bne.n	80024aa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b8a      	ldr	r3, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249a:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0549      	lsls	r1, r1, #21
 80024a0:	430a      	orrs	r2, r1
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80024a4:	183b      	adds	r3, r7, r0
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x694>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d11a      	bne.n	80024ec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b85      	ldr	r3, [pc, #532]	; (80026cc <HAL_RCC_OscConfig+0x694>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b84      	ldr	r3, [pc, #528]	; (80026cc <HAL_RCC_OscConfig+0x694>)
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0049      	lsls	r1, r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fde6 	bl	8001094 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7fe fde1 	bl	8001094 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	; 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e174      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x694>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x4d0>
 80024f8:	4b71      	ldr	r3, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fc:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	0049      	lsls	r1, r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	651a      	str	r2, [r3, #80]	; 0x50
 8002506:	e031      	b.n	800256c <HAL_RCC_OscConfig+0x534>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x4f2>
 8002510:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002516:	496c      	ldr	r1, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x690>)
 8002518:	400a      	ands	r2, r1
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800251e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002522:	496b      	ldr	r1, [pc, #428]	; (80026d0 <HAL_RCC_OscConfig+0x698>)
 8002524:	400a      	ands	r2, r1
 8002526:	651a      	str	r2, [r3, #80]	; 0x50
 8002528:	e020      	b.n	800256c <HAL_RCC_OscConfig+0x534>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	23a0      	movs	r3, #160	; 0xa0
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	429a      	cmp	r2, r3
 8002534:	d10e      	bne.n	8002554 <HAL_RCC_OscConfig+0x51c>
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800253a:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	00c9      	lsls	r1, r1, #3
 8002540:	430a      	orrs	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	; 0x50
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002548:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	0049      	lsls	r1, r1, #1
 800254e:	430a      	orrs	r2, r1
 8002550:	651a      	str	r2, [r3, #80]	; 0x50
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0x534>
 8002554:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800255a:	495b      	ldr	r1, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x690>)
 800255c:	400a      	ands	r2, r1
 800255e:	651a      	str	r2, [r3, #80]	; 0x50
 8002560:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002566:	495a      	ldr	r1, [pc, #360]	; (80026d0 <HAL_RCC_OscConfig+0x698>)
 8002568:	400a      	ands	r2, r1
 800256a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe fd8e 	bl	8001094 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257c:	e009      	b.n	8002592 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe fd89 	bl	8001094 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x69c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e11b      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002592:	4b4b      	ldr	r3, [pc, #300]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d0ef      	beq.n	800257e <HAL_RCC_OscConfig+0x546>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd78 	bl	8001094 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a8:	e009      	b.n	80025be <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fd73 	bl	8001094 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x69c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e105      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025be:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80025c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ca:	2323      	movs	r3, #35	; 0x23
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80025d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80025da:	493f      	ldr	r1, [pc, #252]	; (80026d8 <HAL_RCC_OscConfig+0x6a0>)
 80025dc:	400a      	ands	r2, r1
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	4013      	ands	r3, r2
 80025e8:	d049      	beq.n	800267e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d026      	beq.n	8002640 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x6a4>)
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x6a4>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0189      	lsls	r1, r1, #6
 8002614:	430a      	orrs	r2, r1
 8002616:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fd3c 	bl	8001094 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002622:	f7fe fd37 	bl	8001094 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0ca      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d0f1      	beq.n	8002622 <HAL_RCC_OscConfig+0x5ea>
 800263e:	e01e      	b.n	800267e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002646:	2101      	movs	r1, #1
 8002648:	438a      	bics	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_RCC_OscConfig+0x6a4>)
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_OscConfig+0x6a4>)
 8002652:	4923      	ldr	r1, [pc, #140]	; (80026e0 <HAL_RCC_OscConfig+0x6a8>)
 8002654:	400a      	ands	r2, r1
 8002656:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fd1c 	bl	8001094 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002662:	f7fe fd17 	bl	8001094 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0aa      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2202      	movs	r2, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d1f1      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d100      	bne.n	8002688 <HAL_RCC_OscConfig+0x650>
 8002686:	e09f      	b.n	80027c8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d100      	bne.n	8002690 <HAL_RCC_OscConfig+0x658>
 800268e:	e078      	b.n	8002782 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	2b02      	cmp	r3, #2
 8002696:	d159      	bne.n	800274c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x688>)
 800269e:	4911      	ldr	r1, [pc, #68]	; (80026e4 <HAL_RCC_OscConfig+0x6ac>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fcf6 	bl	8001094 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ac:	e01c      	b.n	80026e8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fcf1 	bl	8001094 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d915      	bls.n	80026e8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e084      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	ffff1fff 	.word	0xffff1fff
 80026c8:	fffffeff 	.word	0xfffffeff
 80026cc:	40007000 	.word	0x40007000
 80026d0:	fffffbff 	.word	0xfffffbff
 80026d4:	00001388 	.word	0x00001388
 80026d8:	efffffff 	.word	0xefffffff
 80026dc:	40010000 	.word	0x40010000
 80026e0:	ffffdfff 	.word	0xffffdfff
 80026e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	049b      	lsls	r3, r3, #18
 80026f0:	4013      	ands	r3, r2
 80026f2:	d1dc      	bne.n	80026ae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f4:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_RCC_OscConfig+0x7a0>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	431a      	orrs	r2, r3
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	0449      	lsls	r1, r1, #17
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fcb7 	bl	8001094 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fcb2 	bl	8001094 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e045      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	049b      	lsls	r3, r3, #18
 8002746:	4013      	ands	r3, r2
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x6f4>
 800274a:	e03d      	b.n	80027c8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_OscConfig+0x7a4>)
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fc9c 	bl	8001094 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe fc97 	bl	8001094 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e02a      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	049b      	lsls	r3, r3, #18
 800277c:	4013      	ands	r3, r2
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x72a>
 8002780:	e022      	b.n	80027c8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e01d      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_OscConfig+0x79c>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	401a      	ands	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d10f      	bne.n	80027c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	23f0      	movs	r3, #240	; 0xf0
 80027a8:	039b      	lsls	r3, r3, #14
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	23c0      	movs	r3, #192	; 0xc0
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b00a      	add	sp, #40	; 0x28
 80027d0:	bdb0      	pop	{r4, r5, r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40021000 	.word	0x40021000
 80027d8:	ff02ffff 	.word	0xff02ffff
 80027dc:	feffffff 	.word	0xfeffffff

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e128      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4013      	ands	r3, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d91e      	bls.n	8002840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002814:	f7fe fc3e 	bl	8001094 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	e009      	b.n	8002832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fc39 	bl	8001094 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a8a      	ldr	r2, [pc, #552]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e109      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b87      	ldr	r3, [pc, #540]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284a:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	22f0      	movs	r2, #240	; 0xf0
 8002850:	4393      	bics	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800285a:	430a      	orrs	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4013      	ands	r3, r2
 8002866:	d100      	bne.n	800286a <HAL_RCC_ClockConfig+0x8a>
 8002868:	e089      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	4013      	ands	r3, r2
 800287c:	d120      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0e1      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800288a:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	049b      	lsls	r3, r3, #18
 8002892:	4013      	ands	r3, r2
 8002894:	d114      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0d5      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a2:	4b6d      	ldr	r3, [pc, #436]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d109      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ca      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028b0:	4b69      	ldr	r3, [pc, #420]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0c2      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4393      	bics	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fbde 	bl	8001094 <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d111      	bne.n	8002908 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7fe fbd5 	bl	8001094 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0a5      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	220c      	movs	r2, #12
 8002900:	4013      	ands	r3, r2
 8002902:	2b08      	cmp	r3, #8
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x106>
 8002906:	e03a      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d111      	bne.n	8002934 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	e009      	b.n	8002926 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f7fe fbbf 	bl	8001094 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e08f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	220c      	movs	r2, #12
 800292c:	4013      	ands	r3, r2
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d1ef      	bne.n	8002912 <HAL_RCC_ClockConfig+0x132>
 8002932:	e024      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d11b      	bne.n	8002974 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800293c:	e009      	b.n	8002952 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293e:	f7fe fba9 	bl	8001094 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e079      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	220c      	movs	r2, #12
 8002958:	4013      	ands	r3, r2
 800295a:	2b04      	cmp	r3, #4
 800295c:	d1ef      	bne.n	800293e <HAL_RCC_ClockConfig+0x15e>
 800295e:	e00e      	b.n	800297e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fb98 	bl	8001094 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e068      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	220c      	movs	r2, #12
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d21e      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4393      	bics	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800299e:	f7fe fb79 	bl	8001094 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	e009      	b.n	80029bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fb74 	bl	8001094 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_RCC_ClockConfig+0x274>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e044      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2204      	movs	r2, #4
 80029d0:	4013      	ands	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x27c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x280>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a08:	f000 f832 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	220f      	movs	r2, #15
 8002a16:	4013      	ands	r3, r2
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_RCC_ClockConfig+0x284>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	40da      	lsrs	r2, r3
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_ClockConfig+0x288>)
 8002a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_ClockConfig+0x28c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	250b      	movs	r5, #11
 8002a2a:	197c      	adds	r4, r7, r5
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe faeb 	bl	8001008 <HAL_InitTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a36:	197b      	adds	r3, r7, r5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40022000 	.word	0x40022000
 8002a54:	00001388 	.word	0x00001388
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	fffff8ff 	.word	0xfffff8ff
 8002a60:	ffffc7ff 	.word	0xffffc7ff
 8002a64:	08003b48 	.word	0x08003b48
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	2000002c 	.word	0x2000002c

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	230c      	movs	r3, #12
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d014      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a86:	d900      	bls.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1a>
 8002a88:	e07b      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x112>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x24>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002a92:	e076      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002aa2:	e07c      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa8:	e079      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aae:	e076      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	0c9a      	lsrs	r2, r3, #18
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	0d9a      	lsrs	r2, r3, #22
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	025b      	lsls	r3, r3, #9
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d01a      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	69f9      	ldr	r1, [r7, #28]
 8002ae6:	f7fd fbbb 	bl	8000260 <__aeabi_lmul>
 8002aea:	0002      	movs	r2, r0
 8002aec:	000b      	movs	r3, r1
 8002aee:	0010      	movs	r0, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f7fd fb8f 	bl	8000220 <__aeabi_uldivmod>
 8002b02:	0002      	movs	r2, r0
 8002b04:	000b      	movs	r3, r1
 8002b06:	0013      	movs	r3, r2
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e037      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b0c:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4013      	ands	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4a23      	ldr	r2, [pc, #140]	; (8002bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	68b8      	ldr	r0, [r7, #8]
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	f7fd fb9b 	bl	8000260 <__aeabi_lmul>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	0010      	movs	r0, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f7fd fb6f 	bl	8000220 <__aeabi_uldivmod>
 8002b42:	0002      	movs	r2, r0
 8002b44:	000b      	movs	r3, r1
 8002b46:	0013      	movs	r3, r2
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4a:	e017      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	0018      	movs	r0, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	0019      	movs	r1, r3
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b56:	2300      	movs	r3, #0
 8002b58:	f7fd fb82 	bl	8000260 <__aeabi_lmul>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	000b      	movs	r3, r1
 8002b60:	0010      	movs	r0, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	001c      	movs	r4, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	001d      	movs	r5, r3
 8002b6c:	0022      	movs	r2, r4
 8002b6e:	002b      	movs	r3, r5
 8002b70:	f7fd fb56 	bl	8000220 <__aeabi_uldivmod>
 8002b74:	0002      	movs	r2, r0
 8002b76:	000b      	movs	r3, r1
 8002b78:	0013      	movs	r3, r2
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b80:	e00d      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	3301      	adds	r3, #1
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	0212      	lsls	r2, r2, #8
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b00e      	add	sp, #56	; 0x38
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	003d0900 	.word	0x003d0900
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200
 8002bb8:	08003b60 	.word	0x08003b60

08002bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b02      	ldr	r3, [pc, #8]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff2 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002bd8:	0001      	movs	r1, r0
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	2207      	movs	r2, #7
 8002be2:	4013      	ands	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	40d9      	lsrs	r1, r3
 8002bea:	000b      	movs	r3, r1
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08003b58 	.word	0x08003b58

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffdc 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002c04:	0001      	movs	r1, r0
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	4013      	ands	r3, r2
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	40d9      	lsrs	r1, r3
 8002c16:	000b      	movs	r3, r1
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08003b58 	.word	0x08003b58

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002c30:	2317      	movs	r3, #23
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d106      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d100      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002c4e:	e104      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c50:	4bb9      	ldr	r3, [pc, #740]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	055b      	lsls	r3, r3, #21
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d10a      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5c:	4bb6      	ldr	r3, [pc, #728]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c60:	4bb5      	ldr	r3, [pc, #724]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	0549      	lsls	r1, r1, #21
 8002c66:	430a      	orrs	r2, r1
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c6a:	2317      	movs	r3, #23
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4bb2      	ldr	r3, [pc, #712]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4baf      	ldr	r3, [pc, #700]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4bae      	ldr	r3, [pc, #696]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0049      	lsls	r1, r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fa02 	bl	8001094 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe f9fd 	bl	8001094 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e143      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4ba4      	ldr	r3, [pc, #656]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002cb4:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	23c0      	movs	r3, #192	; 0xc0
 8002cba:	039b      	lsls	r3, r3, #14
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	23c0      	movs	r3, #192	; 0xc0
 8002cc6:	039b      	lsls	r3, r3, #14
 8002cc8:	4013      	ands	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	23c0      	movs	r3, #192	; 0xc0
 8002cd6:	039b      	lsls	r3, r3, #14
 8002cd8:	4013      	ands	r3, r2
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d013      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	23c0      	movs	r3, #192	; 0xc0
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	401a      	ands	r2, r3
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	029b      	lsls	r3, r3, #10
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10a      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cf2:	4b91      	ldr	r3, [pc, #580]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	029b      	lsls	r3, r3, #10
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	029b      	lsls	r3, r3, #10
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d101      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e113      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d08:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d049      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	23c0      	movs	r3, #192	; 0xc0
 8002d20:	029b      	lsls	r3, r3, #10
 8002d22:	4013      	ands	r3, r2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d004      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	23c0      	movs	r3, #192	; 0xc0
 8002d3a:	029b      	lsls	r3, r3, #10
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d034      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d02e      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002d50:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d5a:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	0309      	lsls	r1, r1, #12
 8002d64:	430a      	orrs	r2, r1
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d68:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d6c:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d6e:	4975      	ldr	r1, [pc, #468]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d014      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe f986 	bl	8001094 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8c:	e009      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe f981 	bl	8001094 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4a6b      	ldr	r2, [pc, #428]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0c6      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d0ef      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4013      	ands	r3, r2
 8002db8:	d01f      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	23c0      	movs	r3, #192	; 0xc0
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	23c0      	movs	r3, #192	; 0xc0
 8002ddc:	039b      	lsls	r3, r3, #14
 8002dde:	401a      	ands	r2, r3
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	23c0      	movs	r3, #192	; 0xc0
 8002df0:	029b      	lsls	r3, r3, #10
 8002df2:	401a      	ands	r2, r3
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002df6:	430a      	orrs	r2, r1
 8002df8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4013      	ands	r3, r2
 8002e02:	d01f      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	23c0      	movs	r3, #192	; 0xc0
 8002e0a:	029b      	lsls	r3, r3, #10
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002e16:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	039b      	lsls	r3, r3, #14
 8002e28:	401a      	ands	r2, r3
 8002e2a:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e32:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e44:	2317      	movs	r3, #23
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e54:	493e      	ldr	r1, [pc, #248]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002e56:	400a      	ands	r2, r1
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	2203      	movs	r2, #3
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e74:	430a      	orrs	r2, r1
 8002e76:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	220c      	movs	r2, #12
 8002e88:	4393      	bics	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	4013      	ands	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b006      	add	sp, #24
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	fffcffff 	.word	0xfffcffff
 8002f44:	fff7ffff 	.word	0xfff7ffff
 8002f48:	00001388 	.word	0x00001388
 8002f4c:	ffcfffff 	.word	0xffcfffff
 8002f50:	efffffff 	.word	0xefffffff
 8002f54:	fffff3ff 	.word	0xfffff3ff
 8002f58:	ffffcfff 	.word	0xffffcfff
 8002f5c:	fbffffff 	.word	0xfbffffff
 8002f60:	fff3ffff 	.word	0xfff3ffff

08002f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e044      	b.n	8003000 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2278      	movs	r2, #120	; 0x78
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fd fd15 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2224      	movs	r2, #36	; 0x24
 8002f92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f830 	bl	800300c <UART_SetConfig>
 8002fac:	0003      	movs	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e024      	b.n	8003000 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fac1 	bl	8003548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	490d      	ldr	r1, [pc, #52]	; (8003008 <HAL_UART_Init+0xa4>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	212a      	movs	r1, #42	; 0x2a
 8002fe2:	438a      	bics	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fb59 	bl	80036b0 <UART_CheckIdleState>
 8002ffe:	0003      	movs	r3, r0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	ffffb7ff 	.word	0xffffb7ff

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003014:	231a      	movs	r3, #26
 8003016:	2218      	movs	r2, #24
 8003018:	189b      	adds	r3, r3, r2
 800301a:	19db      	adds	r3, r3, r7
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	431a      	orrs	r2, r3
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4313      	orrs	r3, r2
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4ac3      	ldr	r2, [pc, #780]	; (800334c <UART_SetConfig+0x340>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4abe      	ldr	r2, [pc, #760]	; (8003350 <UART_SetConfig+0x344>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4ab8      	ldr	r2, [pc, #736]	; (8003354 <UART_SetConfig+0x348>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307c:	4313      	orrs	r3, r2
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4ab4      	ldr	r2, [pc, #720]	; (8003358 <UART_SetConfig+0x34c>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4ab0      	ldr	r2, [pc, #704]	; (800335c <UART_SetConfig+0x350>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d131      	bne.n	8003104 <UART_SetConfig+0xf8>
 80030a0:	4baf      	ldr	r3, [pc, #700]	; (8003360 <UART_SetConfig+0x354>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	2203      	movs	r2, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d01d      	beq.n	80030e8 <UART_SetConfig+0xdc>
 80030ac:	d823      	bhi.n	80030f6 <UART_SetConfig+0xea>
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d00c      	beq.n	80030cc <UART_SetConfig+0xc0>
 80030b2:	d820      	bhi.n	80030f6 <UART_SetConfig+0xea>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <UART_SetConfig+0xb2>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d00e      	beq.n	80030da <UART_SetConfig+0xce>
 80030bc:	e01b      	b.n	80030f6 <UART_SetConfig+0xea>
 80030be:	231b      	movs	r3, #27
 80030c0:	2218      	movs	r2, #24
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	19db      	adds	r3, r3, r7
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e0b4      	b.n	8003236 <UART_SetConfig+0x22a>
 80030cc:	231b      	movs	r3, #27
 80030ce:	2218      	movs	r2, #24
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e0ad      	b.n	8003236 <UART_SetConfig+0x22a>
 80030da:	231b      	movs	r3, #27
 80030dc:	2218      	movs	r2, #24
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	19db      	adds	r3, r3, r7
 80030e2:	2204      	movs	r2, #4
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e0a6      	b.n	8003236 <UART_SetConfig+0x22a>
 80030e8:	231b      	movs	r3, #27
 80030ea:	2218      	movs	r2, #24
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2208      	movs	r2, #8
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e09f      	b.n	8003236 <UART_SetConfig+0x22a>
 80030f6:	231b      	movs	r3, #27
 80030f8:	2218      	movs	r2, #24
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	19db      	adds	r3, r3, r7
 80030fe:	2210      	movs	r2, #16
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e098      	b.n	8003236 <UART_SetConfig+0x22a>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a96      	ldr	r2, [pc, #600]	; (8003364 <UART_SetConfig+0x358>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d131      	bne.n	8003172 <UART_SetConfig+0x166>
 800310e:	4b94      	ldr	r3, [pc, #592]	; (8003360 <UART_SetConfig+0x354>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	220c      	movs	r2, #12
 8003114:	4013      	ands	r3, r2
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d01d      	beq.n	8003156 <UART_SetConfig+0x14a>
 800311a:	d823      	bhi.n	8003164 <UART_SetConfig+0x158>
 800311c:	2b08      	cmp	r3, #8
 800311e:	d00c      	beq.n	800313a <UART_SetConfig+0x12e>
 8003120:	d820      	bhi.n	8003164 <UART_SetConfig+0x158>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x120>
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00e      	beq.n	8003148 <UART_SetConfig+0x13c>
 800312a:	e01b      	b.n	8003164 <UART_SetConfig+0x158>
 800312c:	231b      	movs	r3, #27
 800312e:	2218      	movs	r2, #24
 8003130:	189b      	adds	r3, r3, r2
 8003132:	19db      	adds	r3, r3, r7
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e07d      	b.n	8003236 <UART_SetConfig+0x22a>
 800313a:	231b      	movs	r3, #27
 800313c:	2218      	movs	r2, #24
 800313e:	189b      	adds	r3, r3, r2
 8003140:	19db      	adds	r3, r3, r7
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e076      	b.n	8003236 <UART_SetConfig+0x22a>
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	189b      	adds	r3, r3, r2
 800314e:	19db      	adds	r3, r3, r7
 8003150:	2204      	movs	r2, #4
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e06f      	b.n	8003236 <UART_SetConfig+0x22a>
 8003156:	231b      	movs	r3, #27
 8003158:	2218      	movs	r2, #24
 800315a:	189b      	adds	r3, r3, r2
 800315c:	19db      	adds	r3, r3, r7
 800315e:	2208      	movs	r2, #8
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e068      	b.n	8003236 <UART_SetConfig+0x22a>
 8003164:	231b      	movs	r3, #27
 8003166:	2218      	movs	r2, #24
 8003168:	189b      	adds	r3, r3, r2
 800316a:	19db      	adds	r3, r3, r7
 800316c:	2210      	movs	r2, #16
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e061      	b.n	8003236 <UART_SetConfig+0x22a>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <UART_SetConfig+0x35c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <UART_SetConfig+0x17e>
 800317c:	231b      	movs	r3, #27
 800317e:	2218      	movs	r2, #24
 8003180:	189b      	adds	r3, r3, r2
 8003182:	19db      	adds	r3, r3, r7
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e055      	b.n	8003236 <UART_SetConfig+0x22a>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a77      	ldr	r2, [pc, #476]	; (800336c <UART_SetConfig+0x360>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d106      	bne.n	80031a2 <UART_SetConfig+0x196>
 8003194:	231b      	movs	r3, #27
 8003196:	2218      	movs	r2, #24
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e049      	b.n	8003236 <UART_SetConfig+0x22a>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <UART_SetConfig+0x348>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d13e      	bne.n	800322a <UART_SetConfig+0x21e>
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <UART_SetConfig+0x354>)
 80031ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	22c0      	movs	r2, #192	; 0xc0
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <UART_SetConfig+0x202>
 80031be:	22c0      	movs	r2, #192	; 0xc0
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d82a      	bhi.n	800321c <UART_SetConfig+0x210>
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d011      	beq.n	80031f2 <UART_SetConfig+0x1e6>
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d822      	bhi.n	800321c <UART_SetConfig+0x210>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <UART_SetConfig+0x1d8>
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	00d2      	lsls	r2, r2, #3
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <UART_SetConfig+0x1f4>
 80031e2:	e01b      	b.n	800321c <UART_SetConfig+0x210>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2218      	movs	r2, #24
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e021      	b.n	8003236 <UART_SetConfig+0x22a>
 80031f2:	231b      	movs	r3, #27
 80031f4:	2218      	movs	r2, #24
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e01a      	b.n	8003236 <UART_SetConfig+0x22a>
 8003200:	231b      	movs	r3, #27
 8003202:	2218      	movs	r2, #24
 8003204:	189b      	adds	r3, r3, r2
 8003206:	19db      	adds	r3, r3, r7
 8003208:	2204      	movs	r2, #4
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e013      	b.n	8003236 <UART_SetConfig+0x22a>
 800320e:	231b      	movs	r3, #27
 8003210:	2218      	movs	r2, #24
 8003212:	189b      	adds	r3, r3, r2
 8003214:	19db      	adds	r3, r3, r7
 8003216:	2208      	movs	r2, #8
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e00c      	b.n	8003236 <UART_SetConfig+0x22a>
 800321c:	231b      	movs	r3, #27
 800321e:	2218      	movs	r2, #24
 8003220:	189b      	adds	r3, r3, r2
 8003222:	19db      	adds	r3, r3, r7
 8003224:	2210      	movs	r2, #16
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e005      	b.n	8003236 <UART_SetConfig+0x22a>
 800322a:	231b      	movs	r3, #27
 800322c:	2218      	movs	r2, #24
 800322e:	189b      	adds	r3, r3, r2
 8003230:	19db      	adds	r3, r3, r7
 8003232:	2210      	movs	r2, #16
 8003234:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <UART_SetConfig+0x348>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d000      	beq.n	8003242 <UART_SetConfig+0x236>
 8003240:	e09a      	b.n	8003378 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003242:	231b      	movs	r3, #27
 8003244:	2218      	movs	r2, #24
 8003246:	189b      	adds	r3, r3, r2
 8003248:	19db      	adds	r3, r3, r7
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d01d      	beq.n	800328c <UART_SetConfig+0x280>
 8003250:	dc20      	bgt.n	8003294 <UART_SetConfig+0x288>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d015      	beq.n	8003282 <UART_SetConfig+0x276>
 8003256:	dc1d      	bgt.n	8003294 <UART_SetConfig+0x288>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <UART_SetConfig+0x256>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d005      	beq.n	800326c <UART_SetConfig+0x260>
 8003260:	e018      	b.n	8003294 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003262:	f7ff fcb5 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8003266:	0003      	movs	r3, r0
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800326a:	e01c      	b.n	80032a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800326c:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <UART_SetConfig+0x354>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d002      	beq.n	800327c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <UART_SetConfig+0x364>)
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800327a:	e014      	b.n	80032a6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <UART_SetConfig+0x368>)
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003280:	e011      	b.n	80032a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7ff fbf5 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8003286:	0003      	movs	r3, r0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800328a:	e00c      	b.n	80032a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003292:	e008      	b.n	80032a6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003298:	231a      	movs	r3, #26
 800329a:	2218      	movs	r2, #24
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
        break;
 80032a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <UART_SetConfig+0x2a2>
 80032ac:	e133      	b.n	8003516 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	0013      	movs	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d305      	bcc.n	80032ca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d906      	bls.n	80032d8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80032ca:	231a      	movs	r3, #26
 80032cc:	2218      	movs	r2, #24
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	19db      	adds	r3, r3, r7
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e11e      	b.n	8003516 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	6939      	ldr	r1, [r7, #16]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	000b      	movs	r3, r1
 80032e6:	0e1b      	lsrs	r3, r3, #24
 80032e8:	0010      	movs	r0, r2
 80032ea:	0205      	lsls	r5, r0, #8
 80032ec:	431d      	orrs	r5, r3
 80032ee:	000b      	movs	r3, r1
 80032f0:	021c      	lsls	r4, r3, #8
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68b8      	ldr	r0, [r7, #8]
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	1900      	adds	r0, r0, r4
 8003304:	4169      	adcs	r1, r5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f7fc ff84 	bl	8000220 <__aeabi_uldivmod>
 8003318:	0002      	movs	r2, r0
 800331a:	000b      	movs	r3, r1
 800331c:	0013      	movs	r3, r2
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	429a      	cmp	r2, r3
 8003328:	d309      	bcc.n	800333e <UART_SetConfig+0x332>
 800332a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	035b      	lsls	r3, r3, #13
 8003330:	429a      	cmp	r2, r3
 8003332:	d204      	bcs.n	800333e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e0eb      	b.n	8003516 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800333e:	231a      	movs	r3, #26
 8003340:	2218      	movs	r2, #24
 8003342:	189b      	adds	r3, r3, r2
 8003344:	19db      	adds	r3, r3, r7
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e0e4      	b.n	8003516 <UART_SetConfig+0x50a>
 800334c:	efff69f3 	.word	0xefff69f3
 8003350:	ffffcfff 	.word	0xffffcfff
 8003354:	40004800 	.word	0x40004800
 8003358:	fffff4ff 	.word	0xfffff4ff
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000
 8003364:	40004400 	.word	0x40004400
 8003368:	40004c00 	.word	0x40004c00
 800336c:	40005000 	.word	0x40005000
 8003370:	003d0900 	.word	0x003d0900
 8003374:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	429a      	cmp	r2, r3
 8003382:	d000      	beq.n	8003386 <UART_SetConfig+0x37a>
 8003384:	e070      	b.n	8003468 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003386:	231b      	movs	r3, #27
 8003388:	2218      	movs	r2, #24
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d822      	bhi.n	80033da <UART_SetConfig+0x3ce>
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <UART_SetConfig+0x528>)
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339e:	f7ff fc17 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 80033a2:	0003      	movs	r3, r0
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a6:	e021      	b.n	80033ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff fc28 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80033ac:	0003      	movs	r3, r0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033b0:	e01c      	b.n	80033ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <UART_SetConfig+0x52c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	4013      	ands	r3, r2
 80033ba:	d002      	beq.n	80033c2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033bc:	4b5f      	ldr	r3, [pc, #380]	; (800353c <UART_SetConfig+0x530>)
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033c0:	e014      	b.n	80033ec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <UART_SetConfig+0x534>)
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033c6:	e011      	b.n	80033ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c8:	f7ff fb52 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80033cc:	0003      	movs	r3, r0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033d0:	e00c      	b.n	80033ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033d8:	e008      	b.n	80033ec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033de:	231a      	movs	r3, #26
 80033e0:	2218      	movs	r2, #24
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
        break;
 80033ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d100      	bne.n	80033f4 <UART_SetConfig+0x3e8>
 80033f2:	e090      	b.n	8003516 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	005a      	lsls	r2, r3, #1
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	18d2      	adds	r2, r2, r3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0019      	movs	r1, r3
 8003406:	0010      	movs	r0, r2
 8003408:	f7fc fe7e 	bl	8000108 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	2b0f      	cmp	r3, #15
 8003414:	d921      	bls.n	800345a <UART_SetConfig+0x44e>
 8003416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	025b      	lsls	r3, r3, #9
 800341c:	429a      	cmp	r2, r3
 800341e:	d21c      	bcs.n	800345a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	b29a      	uxth	r2, r3
 8003424:	200e      	movs	r0, #14
 8003426:	2418      	movs	r4, #24
 8003428:	1903      	adds	r3, r0, r4
 800342a:	19db      	adds	r3, r3, r7
 800342c:	210f      	movs	r1, #15
 800342e:	438a      	bics	r2, r1
 8003430:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	2207      	movs	r2, #7
 800343a:	4013      	ands	r3, r2
 800343c:	b299      	uxth	r1, r3
 800343e:	1903      	adds	r3, r0, r4
 8003440:	19db      	adds	r3, r3, r7
 8003442:	1902      	adds	r2, r0, r4
 8003444:	19d2      	adds	r2, r2, r7
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1902      	adds	r2, r0, r4
 8003452:	19d2      	adds	r2, r2, r7
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e05d      	b.n	8003516 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800345a:	231a      	movs	r3, #26
 800345c:	2218      	movs	r2, #24
 800345e:	189b      	adds	r3, r3, r2
 8003460:	19db      	adds	r3, r3, r7
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e056      	b.n	8003516 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003468:	231b      	movs	r3, #27
 800346a:	2218      	movs	r2, #24
 800346c:	189b      	adds	r3, r3, r2
 800346e:	19db      	adds	r3, r3, r7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b08      	cmp	r3, #8
 8003474:	d822      	bhi.n	80034bc <UART_SetConfig+0x4b0>
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <UART_SetConfig+0x538>)
 800347a:	18d3      	adds	r3, r2, r3
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7ff fba6 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8003484:	0003      	movs	r3, r0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003488:	e021      	b.n	80034ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348a:	f7ff fbb7 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 800348e:	0003      	movs	r3, r0
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003492:	e01c      	b.n	80034ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <UART_SetConfig+0x52c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2210      	movs	r2, #16
 800349a:	4013      	ands	r3, r2
 800349c:	d002      	beq.n	80034a4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <UART_SetConfig+0x530>)
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034a2:	e014      	b.n	80034ce <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b26      	ldr	r3, [pc, #152]	; (8003540 <UART_SetConfig+0x534>)
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a8:	e011      	b.n	80034ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7ff fae1 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80034ae:	0003      	movs	r3, r0
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b2:	e00c      	b.n	80034ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ba:	e008      	b.n	80034ce <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034c0:	231a      	movs	r3, #26
 80034c2:	2218      	movs	r2, #24
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
        break;
 80034cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	085a      	lsrs	r2, r3, #1
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	18d2      	adds	r2, r2, r3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0019      	movs	r1, r3
 80034e4:	0010      	movs	r0, r2
 80034e6:	f7fc fe0f 	bl	8000108 <__udivsi3>
 80034ea:	0003      	movs	r3, r0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d90a      	bls.n	800350a <UART_SetConfig+0x4fe>
 80034f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d205      	bcs.n	800350a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	b29a      	uxth	r2, r3
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	e005      	b.n	8003516 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800350a:	231a      	movs	r3, #26
 800350c:	2218      	movs	r2, #24
 800350e:	189b      	adds	r3, r3, r2
 8003510:	19db      	adds	r3, r3, r7
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2200      	movs	r2, #0
 800351a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2200      	movs	r2, #0
 8003520:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003522:	231a      	movs	r3, #26
 8003524:	2218      	movs	r2, #24
 8003526:	189b      	adds	r3, r3, r2
 8003528:	19db      	adds	r3, r3, r7
 800352a:	781b      	ldrb	r3, [r3, #0]
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b00e      	add	sp, #56	; 0x38
 8003532:	bdb0      	pop	{r4, r5, r7, pc}
 8003534:	08007b40 	.word	0x08007b40
 8003538:	40021000 	.word	0x40021000
 800353c:	003d0900 	.word	0x003d0900
 8003540:	00f42400 	.word	0x00f42400
 8003544:	08007b64 	.word	0x08007b64

08003548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	d00b      	beq.n	8003572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <UART_AdvFeatureConfig+0x144>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2202      	movs	r2, #2
 8003578:	4013      	ands	r3, r2
 800357a:	d00b      	beq.n	8003594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a43      	ldr	r2, [pc, #268]	; (8003690 <UART_AdvFeatureConfig+0x148>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2204      	movs	r2, #4
 800359a:	4013      	ands	r3, r2
 800359c:	d00b      	beq.n	80035b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <UART_AdvFeatureConfig+0x14c>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2208      	movs	r2, #8
 80035bc:	4013      	ands	r3, r2
 80035be:	d00b      	beq.n	80035d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a34      	ldr	r2, [pc, #208]	; (8003698 <UART_AdvFeatureConfig+0x150>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2210      	movs	r2, #16
 80035de:	4013      	ands	r3, r2
 80035e0:	d00b      	beq.n	80035fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a2c      	ldr	r2, [pc, #176]	; (800369c <UART_AdvFeatureConfig+0x154>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2220      	movs	r2, #32
 8003600:	4013      	ands	r3, r2
 8003602:	d00b      	beq.n	800361c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <UART_AdvFeatureConfig+0x158>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	4013      	ands	r3, r2
 8003624:	d01d      	beq.n	8003662 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <UART_AdvFeatureConfig+0x15c>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	035b      	lsls	r3, r3, #13
 8003646:	429a      	cmp	r2, r3
 8003648:	d10b      	bne.n	8003662 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <UART_AdvFeatureConfig+0x160>)
 8003652:	4013      	ands	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	4013      	ands	r3, r2
 800366a:	d00b      	beq.n	8003684 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <UART_AdvFeatureConfig+0x164>)
 8003674:	4013      	ands	r3, r2
 8003676:	0019      	movs	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b002      	add	sp, #8
 800368a:	bd80      	pop	{r7, pc}
 800368c:	fffdffff 	.word	0xfffdffff
 8003690:	fffeffff 	.word	0xfffeffff
 8003694:	fffbffff 	.word	0xfffbffff
 8003698:	ffff7fff 	.word	0xffff7fff
 800369c:	ffffefff 	.word	0xffffefff
 80036a0:	ffffdfff 	.word	0xffffdfff
 80036a4:	ffefffff 	.word	0xffefffff
 80036a8:	ff9fffff 	.word	0xff9fffff
 80036ac:	fff7ffff 	.word	0xfff7ffff

080036b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b092      	sub	sp, #72	; 0x48
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2284      	movs	r2, #132	; 0x84
 80036bc:	2100      	movs	r1, #0
 80036be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036c0:	f7fd fce8 	bl	8001094 <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2208      	movs	r2, #8
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d12c      	bne.n	8003730 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	0391      	lsls	r1, r2, #14
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <UART_CheckIdleState+0x148>)
 80036e0:	9200      	str	r2, [sp, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f000 f88c 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 80036e8:	1e03      	subs	r3, r0, #0
 80036ea:	d021      	beq.n	8003730 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f6:	2301      	movs	r3, #1
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2278      	movs	r2, #120	; 0x78
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05f      	b.n	80037f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2204      	movs	r2, #4
 8003738:	4013      	ands	r3, r2
 800373a:	2b04      	cmp	r3, #4
 800373c:	d146      	bne.n	80037cc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	03d1      	lsls	r1, r2, #15
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <UART_CheckIdleState+0x148>)
 8003748:	9200      	str	r2, [sp, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	f000 f858 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d03b      	beq.n	80037cc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003754:	f3ef 8310 	mrs	r3, PRIMASK
 8003758:	60fb      	str	r3, [r7, #12]
  return(result);
 800375a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
 800375e:	2301      	movs	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4921      	ldr	r1, [pc, #132]	; (80037fc <UART_CheckIdleState+0x14c>)
 8003776:	400a      	ands	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	61bb      	str	r3, [r7, #24]
  return(result);
 800378c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	438a      	bics	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	2120      	movs	r1, #32
 80037be:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2278      	movs	r2, #120	; 0x78
 80037c4:	2100      	movs	r1, #0
 80037c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e011      	b.n	80037f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	2120      	movs	r1, #32
 80037d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2278      	movs	r2, #120	; 0x78
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b010      	add	sp, #64	; 0x40
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	01ffffff 	.word	0x01ffffff
 80037fc:	fffffedf 	.word	0xfffffedf

08003800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003810:	e04b      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3301      	adds	r3, #1
 8003816:	d048      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fd fc3c 	bl	8001094 <HAL_GetTick>
 800381c:	0002      	movs	r2, r0
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04b      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2204      	movs	r2, #4
 800383a:	4013      	ands	r3, r2
 800383c:	d035      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2208      	movs	r2, #8
 8003846:	4013      	ands	r3, r2
 8003848:	2b08      	cmp	r3, #8
 800384a:	d111      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f83c 	bl	80038d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2284      	movs	r2, #132	; 0x84
 8003860:	2108      	movs	r1, #8
 8003862:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2278      	movs	r2, #120	; 0x78
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e02c      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	401a      	ands	r2, r3
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	429a      	cmp	r2, r3
 8003882:	d112      	bne.n	80038aa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f81f 	bl	80038d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2284      	movs	r2, #132	; 0x84
 800389a:	2120      	movs	r1, #32
 800389c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2278      	movs	r2, #120	; 0x78
 80038a2:	2100      	movs	r1, #0
 80038a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	4153      	adcs	r3, r2
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	001a      	movs	r2, r3
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d0a4      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038dc:	f3ef 8310 	mrs	r3, PRIMASK
 80038e0:	617b      	str	r3, [r7, #20]
  return(result);
 80038e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4926      	ldr	r1, [pc, #152]	; (8003998 <UART_EndRxTransfer+0xc4>)
 80038fe:	400a      	ands	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390e:	f3ef 8310 	mrs	r3, PRIMASK
 8003912:	623b      	str	r3, [r7, #32]
  return(result);
 8003914:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
 8003918:	2301      	movs	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f383 8810 	msr	PRIMASK, r3
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2101      	movs	r1, #1
 8003930:	438a      	bics	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	2b01      	cmp	r3, #1
 8003946:	d118      	bne.n	800397a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003948:	f3ef 8310 	mrs	r3, PRIMASK
 800394c:	60bb      	str	r3, [r7, #8]
  return(result);
 800394e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	2301      	movs	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f383 8810 	msr	PRIMASK, r3
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2110      	movs	r1, #16
 800396a:	438a      	bics	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	2120      	movs	r1, #32
 8003980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b00e      	add	sp, #56	; 0x38
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	fffffedf 	.word	0xfffffedf

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	2600      	movs	r6, #0
 80039a0:	4d0c      	ldr	r5, [pc, #48]	; (80039d4 <__libc_init_array+0x38>)
 80039a2:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a4:	1b64      	subs	r4, r4, r5
 80039a6:	10a4      	asrs	r4, r4, #2
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	2600      	movs	r6, #0
 80039ae:	f000 f821 	bl	80039f4 <_init>
 80039b2:	4d0a      	ldr	r5, [pc, #40]	; (80039dc <__libc_init_array+0x40>)
 80039b4:	4c0a      	ldr	r4, [pc, #40]	; (80039e0 <__libc_init_array+0x44>)
 80039b6:	1b64      	subs	r4, r4, r5
 80039b8:	10a4      	asrs	r4, r4, #2
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	00b3      	lsls	r3, r6, #2
 80039c2:	58eb      	ldr	r3, [r5, r3]
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	00b3      	lsls	r3, r6, #2
 80039cc:	58eb      	ldr	r3, [r5, r3]
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	08007b90 	.word	0x08007b90
 80039d8:	08007b90 	.word	0x08007b90
 80039dc:	08007b90 	.word	0x08007b90
 80039e0:	08007b94 	.word	0x08007b94

080039e4 <memset>:
 80039e4:	0003      	movs	r3, r0
 80039e6:	1882      	adds	r2, r0, r2
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d100      	bne.n	80039ee <memset+0xa>
 80039ec:	4770      	bx	lr
 80039ee:	7019      	strb	r1, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	e7f9      	b.n	80039e8 <memset+0x4>

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
